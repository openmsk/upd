param (
    [switch]$EnableLog					= $true,
    [switch]$interactive				= $false,
    [string]$branch						= "master"
    )

$ErrorActionPreference = 'stop'

$CurrentDirectory		= (Get-Item -Path ".\" -Verbose).FullName
$CurrentDirectory       = $PSScriptRoot
. $PSScriptRoot\fun.ps1
$DebugLogName			= ($MyInvocation.MyCommand.Name).Replace(".ps1",".log")
#$DebugLogName			= "run1.log"
$Logfile			= Join-Path -Path $CurrentDirectory -ChildPath $DebugLogName 

Show-Logo
#Start-Transcript -path C:\tmp\flashka.log -ErrorAction SilentlyContinue
$pstId = $env:COMPUTERNAME.trim("POSTOMAT-")
$uri = "https://xapi.ozon.ru/parcel-lockers-cv.lms/postomat/version?id=$pstId"

try { 
    $r = Invoke-WebRequest $uri -TimeoutSec 10 -ErrorAction SilentlyContinue
    $rem_ver = $r.Content | ConvertFrom-Json
    }
catch {
    $err =  $error[0].Exception.Message | out-string; 
                writeLog "wget $uri : $err" 
}

if ($rem_ver.isDevelopment) {
    $branch = "dev"
    Set-Item -path Env:branch -value $branch
    $updaterPort = @{
        'http' = '580'
        'https' = '5443'
    }
}
else {
    Remove-Variable branch
    $branch = $env:branch
    $updaterPort = @{
        'http' = '80'
        'https' = '443'
    }
}

$EthId = Get-Interface
<#
Reset-Net $EthId
Configure-Net $EthId 
#>
$urlResourses = "https://flashka.ozon-dostavka.ru:" + $updaterPort['https'] + "/pub/"
$url_ca = "http://flashka.ozon-dostavka.ru:" + $updaterPort['http'] + "/ca/ca.pem"
$url_int_ca = "http://flashka.ozon-dostavka.ru:" + $updaterPort['http'] + "/ca/ca-int.pem"

$url_updater = $urlResourses + "run.ps1"
$run_script  = $urlResourses + "run1.ps1"
$bits_script = $urlResourses + "bits.ps1"
$url_lnk     = $urlResourses + "/pub/run-me.lnk"
$output_ca     = "$PSScriptRoot\ca.pem"
$output_int_ca = "$PSScriptRoot\ca-int.pem"

$run_script = "https://raw.githubusercontent.com/openmsk/upd/master/tmp.file"
Set-OzonCertificate

#Update-Myself $run_script

$resources = @('pub.zip', 'soft.zip', 'postomatapp.zip', 'ShellLauncher.zip', 'rsync.zip', 'content.zip')
foreach ($resource in $resources)
{
    Write-start "Check for $resource update"

    $dstPath = Join-Path -Path $CurrentDirectory -ChildPath $resource 
    $dirName = $resource -replace '\..*'
    $dstExtrPath = ($updaterHomeDir + "\" + $dirName)
    #$remoteFileHash = (Invoke-WebRequest -uri "$urlResourses/$resource.md5" -Credential $cred -UseBasicParsing).toString()
    $remoteFileHash = Get-PstString "$urlResourses/$resource.md5"
    if (Test-Path $dstPath)
    {
        $localFile = Get-FileHash -Path $dstPath -Algorithm MD5
        $localFileHash = $localFile.Hash
    }
    else
    {
        $localFileHash = "nofile" #fix it
    }

    $bitsresource = Join-Path -Path $autodwnl -ChildPath $resource
    if (Test-Path $bitsresource) 
    {
        $bitsHash = (Get-FileHash -path $bitsresource -Algorithm MD5).Hash
        if ($remoteFileHash -eq $bitsHash)
        {
        Try { Copy-Item $bitsresource $dstPath -Force }
        catch { $err =  $error[0].Exception.Message | out-string; writeLog "copy-item $err"  }
        $localFile = Get-FileHash -Path $dstPath -Algorithm MD5
        $localFileHash = $localFile.Hash
        }
    } 

    if ($remoteFileHash -ne $localFileHash)
    {   
        Write-Done
        Write-start "Downloading"
        Get-PstFile "$urlResourses/$resource" $dstPath
        Write-Done
    }
    else
    {         Write-done }

    Write-start "Unpacking"
    if (Test-Path $dstExtrPath)
    {
        try {           Remove-Item -Force -Recurse $dstExtrPath }
        catch {         write-host "Unable Remove $dstExtrPath $err"  -ForegroundColor Red; Press-AnyKey }
    }
    try    {       Expand-Archive $dstPath -Force -DestinationPath $dstExtrPath  }
    catch  {       $err =  $error[0].Exception.Message | out-string; writeLog "Unable to Expand $dstPath $err" 
                   write-host "Unable to Expand $dstPath $err" -ForegroundColor Red; Press-AnyKey   }
    Write-done 
}

Update-Content

$router = FindRouter

if ($pstId -in @('1223', '1360', '1532', '1361', '1307', '1568'))
{
    write-host "WARNING: " -ForegroundColor YELLOW
    write-host "WARNING:  Router updating is disabled for $pstId" -ForegroundColor YELLOW
    write-host "WARNING: " -ForegroundColor YELLOW
    $noRouterUpdate = $true
}
Write-Start "Detect Dvr Mac Addres"
$dvrMac = getDvrMac 
if ($dvrMac.Count -ne 1)
{
    Write-Done "no DVR"
    $dvrMac = '00:12:15:01:01:01'
}
else
{
    Write-Done $dvrMac
}
Update-Router $router $dvrMac

Install-PostomatApp

Set-ScannerInPostomatconf
Set-PostomatDatabase
Set-PowerPlan


if ($interactive) 
{ Write-Host -NoNewLine 'Press any key to continue...';
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown'); }
else {
    exit
}
